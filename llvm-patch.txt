Index: bindings/ocaml/llvm/llvm.ml
===================================================================
--- bindings/ocaml/llvm/llvm.ml	(revision 66359)
+++ bindings/ocaml/llvm/llvm.ml	(working copy)
@@ -730,6 +730,10 @@
                                llbuilder -> llvalue = "llvm_build_insertelement"
 external build_shufflevector : llvalue -> llvalue -> llvalue -> string ->
                                llbuilder -> llvalue = "llvm_build_shufflevector"
+external build_extractvalue : llvalue -> int -> string -> llbuilder ->
+                              llvalue = "llvm_build_extractvalue"
+external build_insertvalue : llvalue -> llvalue -> int -> string ->
+                             llbuilder -> llvalue = "llvm_build_insertvalue"
 
 
 (*===-- Module providers --------------------------------------------------===*)
Index: bindings/ocaml/llvm/llvm_ocaml.c
===================================================================
--- bindings/ocaml/llvm/llvm_ocaml.c	(revision 66359)
+++ bindings/ocaml/llvm/llvm_ocaml.c	(working copy)
@@ -1211,7 +1211,23 @@
   return LLVMBuildShuffleVector(Builder_val(B), V1, V2, Mask, String_val(Name));
 }
 
+/* llvalue -> int -> string -> llbuilder -> llvalue */
+CAMLprim LLVMValueRef llvm_build_extractvalue(LLVMValueRef Agg,
+					      value Idx,
+					      value Name, value B) {
+  return LLVMBuildExtractValue(Builder_val(B), Agg, Int_val(Idx), String_val(Name));
+}
 
+/* llvalue -> llvalue -> int -> string -> llbuilder -> llvalue */
+CAMLprim LLVMValueRef llvm_build_insertvalue(LLVMValueRef Agg,
+					     LLVMValueRef Elt,
+					     value Idx,
+					     value Name, value B) {
+  return LLVMBuildInsertValue(Builder_val(B), Agg, Elt, Int_val(Idx),
+			      String_val(Name));
+}
+
+
 /*===-- Module Providers --------------------------------------------------===*/
 
 /* llmoduleprovider -> unit */
Index: bindings/ocaml/llvm/llvm.mli
===================================================================
--- bindings/ocaml/llvm/llvm.mli	(revision 66359)
+++ bindings/ocaml/llvm/llvm.mli	(working copy)
@@ -1591,7 +1591,13 @@
 external build_shufflevector : llvalue -> llvalue -> llvalue -> string ->
                                llbuilder -> llvalue = "llvm_build_shufflevector"
 
+external build_extractvalue : llvalue -> int -> string -> llbuilder ->
+  llvalue = "llvm_build_extractvalue"
 
+external build_insertvalue : llvalue -> llvalue -> int -> string ->
+  llbuilder -> llvalue = "llvm_build_insertvalue"
+
+
 (** {6 Module providers} *)
 
 module ModuleProvider : sig
Index: lib/Target/TargetMachine.cpp
===================================================================
--- lib/Target/TargetMachine.cpp	(revision 66359)
+++ lib/Target/TargetMachine.cpp	(working copy)
@@ -134,7 +134,7 @@
 EnablePerformTailCallOpt("tailcallopt",
                          cl::desc("Turn on tail call optimization."),
                          cl::location(PerformTailCallOpt),
-                         cl::init(false));
+                         cl::init(true));
 
 static cl::opt<unsigned, true>
 OverrideStackAlignment("stack-alignment",
